<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style TargetType="ComboBox">
        <Setter Property="VerticalAlignment"
             Value="Center"/>
        <Setter Property="Margin"
             Value="2"/>
        <Setter Property="Foreground"
                Value="Black"/>
    </Style>

    <Style TargetType="Grid">
        <Setter Property="Background"
             Value="{DynamicResource MainBackgroundBrush}"/>
    </Style>

    <Style TargetType="Grid" x:Key="GridNoneStyle"/>

    <Style TargetType="Grid" x:Key="MenuButtonGrid" BasedOn="{StaticResource {x:Type Grid}}">
        <Setter Property="Height" Value="30"/>
    </Style>

    <Style TargetType="GroupBox">
        <Setter Property="Margin"
             Value="3"/>
    </Style>

    <Style TargetType="TextBox">
        <Setter Property="Foreground"
             Value="{DynamicResource TextBrush}"/>
        <Setter Property="Background"
             Value="{DynamicResource InputTextBackgroundBrush}"/>
        <Setter Property="TextAlignment"
             Value="Right"/>
        <Setter Property="VerticalAlignment"
             Value="Center"/>
        <Setter Property="Padding"
             Value="5 2"/>
        <Setter Property="Margin"
             Value="2"/>
    </Style>

    <Style x:Key="TextBlockBase" TargetType="TextBlock">
        <Setter Property="Foreground"
             Value="{DynamicResource TextBrush}"/>
        <Setter Property="VerticalAlignment"
             Value="Center"/>
        <Setter Property="HorizontalAlignment"
             Value="Right"/>
        <Setter Property="FontSize"
        Value="16"/>
    </Style>

    <Style x:Key="TextBlockVal" TargetType="TextBlock" BasedOn="{StaticResource TextBlockBase}">
        <Setter Property="FontWeight"
            Value="Bold"/>

        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Margin" Value="5 2 0 2"/>
    </Style>

    <Style x:Key="TextBlockRight" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="HorizontalAlignment"
             Value="Right"/>
    </Style>

    <Style x:Key="HeaderTextBlock" TargetType="TextBlock" >
        <Setter Property="Background"
             Value="{DynamicResource MainBackgroundBrush}"/>
        <Setter Property="Foreground"
            Value="{DynamicResource TextBrush}"/>
        <Setter Property="Padding"
             Value="5 1"/>
        <Setter Property="FontWeight"
             Value="Bold"/>
        <Setter Property="FontSize"
             Value="14"/>
    </Style>

    <Style x:Key="HeaderTextBlockSmall" TargetType="TextBlock" BasedOn="{StaticResource  HeaderTextBlock}">
        <Setter Property="FontWeight"
             Value="Normal"/>
        <Setter Property="FontSize"
             Value="12"/>
    </Style>

    <Style TargetType="Image" x:Key="ToolBarIcon">
        <Setter Property="Stretch" Value="UniformToFill"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Width" Value="25"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="1"/>
    </Style>

    <Style TargetType="Button">
        <Setter Property="Margin" Value="5 1 5 1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <TextBlock x:Name="textBlock" Foreground="{DynamicResource ForegroundBrush}"
                            Text="{TemplateBinding Content}"                               
                            HorizontalAlignment="Center"
                                   FontSize="20"
                            VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="textBlock" Property="Foreground" Value="{DynamicResource TextButtonUderMouse}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="textBlock" Property="Foreground" Value="{DynamicResource InactiveText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonUderMouse}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource InactiveButton}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="SimpleButton">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ButtonUderMouse}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource InactiveButton}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="SupWindowButton" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
        <Setter Property="Margin"
             Value="3"/>
        <Setter Property="Padding"
             Value="3"/>
    </Style>

    <Style TargetType="Button" x:Key="HeaderButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <TextBlock Foreground="{DynamicResource TextBrush}"
                            Text="{TemplateBinding Content}"
                            TextAlignment="Center"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="TinyButton" BasedOn="{StaticResource {x:Type Button}}" >
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="FontSize" Value="8"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style TargetType="Button" x:Key="TestButtonStyle">
        <Setter Property="FontStyle" Value="Oblique"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Background" Value="Red"/>
    </Style>

    <Style x:Key="NightButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1.1" ScaleY="1.1"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="15 5"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
    </Style>

    <Style TargetType="ListBox">
        <Setter Property="Background"
             Value="Lavender"/>
    </Style>

    <Style TargetType="Border">
        <Setter Property="BorderBrush"
             Value="{DynamicResource TextBrush}"/>
    </Style>

    <Style TargetType="Border" x:Key="MessageBorderStyle" BasedOn="{StaticResource {x:Type Border}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding MessageType}" Value="Output">
                <Setter Property="Background" Value="LightSalmon"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding MessageType}" Value="Input">
                <Setter Property="Background" Value="LightSkyBlue"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="Menu">
        <Setter Property="Background" Value="{DynamicResource MainBackgroundBrush}"/>
    </Style>

    <Style  TargetType="MenuItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Border x:Name="Border" Background="{TemplateBinding Background}">
                        <Grid Style="{Binding none}" HorizontalAlignment="Left">
                            <ContentPresenter Margin="18,4,18,4" ContentSource="Header" RecognizesAccessKey="True"/>
                            <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                                <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" BorderThickness="1" Background="{DynamicResource TextBrush}">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Background="{DynamicResource TextBrush}"/>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource MainBackgroundBrush}"/>
                <Setter Property="TextBlock.Foreground" Value="Red"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="{DynamicResource MainBackgroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MenuSeparatorStyle" TargetType="Separator">
        <Setter Property="Background" Value="{DynamicResource TextBrush}"/>
    </Style>

    <Style TargetType="ComboBoxItem">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Padding" Value="5" />
    </Style>

    <Style TargetType="Expander">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource MainBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                      Content="{TemplateBinding Header}"
                                      FontWeight="Bold"
                                      Foreground="{TemplateBinding Foreground}"
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      DockPanel.Dock="Top"
                                      HorizontalAlignment="Stretch"
                                      VerticalAlignment="Center"
                                      HorizontalContentAlignment="Left"
                                      VerticalContentAlignment="Center"
                                      Padding="5">                              
                            </ToggleButton>
                            <ContentPresenter x:Name="ExpandSite"
                                          Visibility="Collapsed"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Height="28">
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Setter Property="Background" Value="{DynamicResource ButtonBrush}" />
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource ButtonUderMouse}" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ProgressBar" x:Key="MainProgressBarStyle">
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Height" Value="25"/>
    </Style>

    <Style x:Key="GroupBoxBaseStyle" TargetType="GroupBox">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}" Style="{StaticResource HeaderTextBlock}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FancyCheckBox" TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Border 
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="3" 
                        CornerRadius="4" 
                        Padding="5">

                        </Border>
                        <ContentPresenter 
                        x:Name="contentPresenter"                             
                        ContentSource="Content" 
                        HorizontalAlignment="Right" 
                        VerticalAlignment="Center" 
                        Margin="15,1,8,2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CheckBoxIsCheckedBackground}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CheckBoxIsCheckedBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource CheckBoxIsCheckedForeground}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CheckboxIsMouseOverBackground}" />
                            <!--<Setter Property="BorderBrush" Value="{DynamicResource CheckboxIsMouseOverBorderBrush}" />-->
                            <Setter Property="Foreground" Value="{DynamicResource CheckboxIsMouseOverForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource CheckboxBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckboxBorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource CheckboxForeground}" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="1" />
    </Style>

    <Style TargetType="RadioButton">
        <Setter Property="Foreground" Value="{DynamicResource InactiveText}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <DockPanel LastChildFill="True">
                        <Border x:Name="Border" 
                            Width="20" 
                            Height="20" 
                            CornerRadius="10" 
                            BorderBrush="{DynamicResource InactiveText}" 
                            BorderThickness="2" 
                            Background="{DynamicResource RadioButtonBackground}"
                            DockPanel.Dock="Left">
                            <Ellipse x:Name="CheckMark" 
                                 Width="12" 
                                 Height="12" 
                                 Fill="{DynamicResource RadioButtonBorderBrush}" 
                                 Visibility="Collapsed"/>
                        </Border>
                        <ContentPresenter HorizontalAlignment="Left" 
                                      VerticalAlignment="Center" 
                                      Margin="8, -2, 0, 0"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource RadioButtonBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextButtonUderMouse}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>